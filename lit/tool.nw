@
\section{Tools}

I'm trying to organize codes at a high level of abstraction,
seems like coding with natural language,
but the compiler do not understand my genius.
Although The literate programming tools help somewhat,
there's still a need to do some dirty works myself.

This chapter described some tools aiding description of {\tt MOS}. 
Some develepers tend to seperate this kind of stuffs from the main part of documenting,
but I decide to keep a whole chapter to talk about the tools, 
which I used to refine writings.

@
\subsection{Common Part}
Some scripts should be aware of where other files are.

<<shell's header>>=
#!/bin/sh

lit_dir=lit
tool_dir=tool
src_dir=src

@
\subsection{Autogenerate Layout}

Generate source code's layout to help {\tt noweb} producing final codes understood by
compiler or assembler, there are two types now,
assambly~code and C~code.

<<autolayout.sh>>=
<<shell's header>>

suf=$(expr $1 : '[[:graph:]]*\.\([[:alnum:]]*\)') 
m4 -DMODULE=$(basename $1 .$suf) -DSUFFIX=$suf $tool_dir/module.m4

@
A [[ifelse]] macro to decide which layout to use.
<<module.m4>>=
ifelse(
SUFFIX, c, dnl
@<<MODULE.c@>>=
<<c code's layout>>
,
SUFFIX, S, dnl
<<assembly code's layout>>
)

<<c code's layout>>=
@<<MODULE.c@>>=
@<<MODULE's repertoire@>>
@<<MODULE's macros@>>
@<<MODULE's data@>>
@<<MODULE's prototypes@>>
@<<MODULE's functions@>>

@<<MODULE's repertoire@>>=

@<<MODULE's macros@>>=

@<<MODULE's data@>>=

@<<MODULE's prototypes@>>=

@<<MODULE's interface@>>=

@<<MODULE's port@>>=

<<assembly code's layout>>=
@<<MODULE's functions@>>= 
@<<MODULE.S@>>=
@<<MODULE's repertoire@>>
.section .text
@<<MODULE's text@>>
.section .data
@<<MODULE's data@>>

@<<MODULE's repertoire@>>=

@<<MODULE's text@>>=
@<<MODULE's functions@>>

@<<MODULE's data@>>=

@
\subsection{m4 macros}
Some useful macros reduce a lot of pains in typing.
<<parse.sh>>=
<<shell's header>>

for m4_chunk in "save all registers" \
		"recover all registers"
	do 
	echo "@<<$m4_chunk@>>="
	notangle -R"$m4_chunk in m4" lit/* | m4 $tool_dir/macros.m4 -
done

<<macros.m4>>=
define(`forloop', `pushdef(`$1', `$2')_forloop($@)popdef(`$1')')dnl
define(`_forloop', `$4`'ifelse($1, `$3', `', `define(`$1', incr($1))$0($@)')')dnl
dnl
@
Save a series of register.
<<macros.m4>>=
define(`mos_regs', `forloop(`i', $3, $4, `$1 $2`'i, eval(i*8+($6))($5)
')')dnl
@ %def mos_regs
