@
\subsection{Appendix: C interface to RISC-V}
The only way to access registers is through assembly code,
so defining C~interface to {\tt RISC-V} architecture is useful.
You can skip this chapter if you already have some knowledge of {\tt RISC-V}'s privileged architecture.
I will do some explanation but it's your work to learn this subject.

<<repertoire of driver layer>>=
<<riscv: types>>
<<riscv: macros and inline functions>>

@
Some useful macros.
<<riscv: macros and inline functions>>=
#define ASM(s) asm volatile(s)
#define ASM_W(s) asm volatile(s::"r" (x))
#define ASM_R(s) asm volatile(s:"=r" (x))

@ %def ASM ASM_W ASM_R

@
Which hart (core) is this?
<<riscv: macros and inline functions>>=
static inline uint64 r_mhartid()
{
	uint64 x;
	ASM_R("csrr %0, mhartid");
	return x;
}

@ %def r_mhartid

@
Machine Status Register, mstatus.

<<riscv: macros and inline functions>>=
#define MSTATUS_MPP_MASK (3L << 11)	/* previous mode. */
#define MSTATUS_MPP_M (3L << 11)
#define MSTATUS_MPP_S (1L << 11)
#define MSTATUS_MPP_U (0L << 11)
#define MSTATUS_MIE (1L << 3)	/* machine-mode interrupt enable. */
#define MSTATUS_SIE (1L << 1)	/* supervisor-mode interrupt enable. */
#define MSTATUS_TVM (1L << 20)	/* trap virtual memory */
#define MSTATUS_TW (1L << 21)	/* timeout wait */
#define MSTATUS_TSR (1L << 22) 	/* trap SRET */

static inline uint64 r_mstatus()
{
	uint64 x;
	ASM_R("csrr %0, mstatus");
	return x;
}

static inline void w_mstatus(uint64 x)
{
	ASM_W("csrw mstatus, %0");
}

@ %def MSTATUS_MPP_MASK MSTATUS_MPP_M MSTATUS_MPP_S MSTATUS_MPP_U MSTATUS_MIE
@ %def r_mstatus w_mstatus

@
Machine exception program counter,
holds the instruction address to which a return from
exception will go.
<<riscv: macros and inline functions>>=
static inline void w_mepc(uint64 x)
{
	ASM_W("csrw mepc, %0");
}

@ %def w_mepc

@
Supervisor Status Register, sstatus.

<<riscv: macros and inline functions>>=
#define SSTATUS_SPP (1L << 8)	/* Previous mode, 1=Supervisor, 0=User */
#define SSTATUS_SPIE (1L << 5)	/* Supervisor Previous Interrupt Enable */
#define SSTATUS_UPIE (1L << 4)	/* User Previous Interrupt Enable */
#define SSTATUS_SIE (1L << 1)	/* Supervisor Interrupt Enable */
#define SSTATUS_UIE (1L << 0)	/* User Interrupt Enable */

static inline uint64 r_sstatus()
{
	uint64 x;
	ASM_R("csrr %0, sstatus");
	return x;
}

static inline void w_sstatus(uint64 x)
{
	ASM_W("csrw sstatus, %0");
}

@ %def SSTATUS_SPP SSTATUS_SPIE SSTATUS_UPIE SSTATUS_SIE SSTATUS_UIE
@ %def r_sstatus w_sstatus

@
Supervisor Interrupt Pending.
<<riscv: macros and inline functions>>=
static inline uint64 r_sip()
{
	uint64 x;
	ASM_R("csrr %0, sip");
	return x;
}

static inline void w_sip(uint64 x)
{
	ASM_W("csrw sip, %0");
}

@ %def r_sip w_sip

@
Supervisor Interrupt Enable.
<<riscv: macros and inline functions>>=
#define SIE_SEIE (1L << 9)	/* external */
#define SIE_STIE (1L << 5)	/* timer */
#define SIE_SSIE (1L << 1)	/* software */

static inline uint64 r_sie()
{
	uint64 x;
	ASM_R("csrr %0, sie");
	return x;
}

static inline void w_sie(uint64 x)
{
	ASM_W("csrw sie, %0");
}

@ %def SIE_SEIE SIE_STIE SIE_SSIE
@ %def r_sie w_sie

@
Machine-mode Interrupt Enable.
<<riscv: macros and inline functions>>=
#define MIE_MEIE (1L << 11)	/* external */
#define MIE_MTIE (1L << 7)	/* timer */
#define MIE_MSIE (1L << 3)	/* software */

static inline uint64 r_mie()
{
	uint64 x;
	ASM_R("csrr %0, mie");
	return x;
}

static inline void w_mie(uint64 x)
{
	ASM_W("csrw mie, %0");
}

@ %def MIE_MEIE MIE_MTIE MIE_MSIE
@ %def r_mie w_mie

@
Supervisor exception program counter, holds the
instruction address to which a return from
exception will go.
<<riscv: macros and inline functions>>=
static inline void w_sepc(uint64 x)
{
	ASM_W("csrw sepc, %0");
}

static inline uint64 r_sepc()
{
	uint64 x;
	ASM_R("csrr %0, sepc");
	return x;
}

@ %def w_sepc r_sepc

@
Machine Exception Delegation.
<<riscv: macros and inline functions>>=
static inline uint64 r_medeleg()
{
	uint64 x;
	ASM_R("csrr %0, medeleg");
	return x;
}

static inline void w_medeleg(uint64 x)
{
	ASM_W("csrw medeleg, %0");
}

@ %def r_medeleg w_medeleg

@
Machine Interrupt Delegation.
<<riscv: macros and inline functions>>=
static inline uint64 r_mideleg()
{
	uint64 x;
	ASM_R("csrr %0, mideleg");
	return x;
}

static inline void w_mideleg(uint64 x)
{
	ASM_W("csrw mideleg, %0");
}

@ %def r_mideleg w_mideleg

@
Supervisor Trap-Vector Base Address,
low two bits are mode.
<<riscv: macros and inline functions>>=
static inline void w_stvec(uint64 x)
{
	ASM_W("csrw stvec, %0");
}

static inline uint64 r_stvec()
{
	uint64 x;
	ASM_R("csrr %0, stvec");
	return x;
}

@ %def w_stvec r_stvec

@
Machine-mode interrupt vector.
<<riscv: macros and inline functions>>=
static inline void w_mtvec(uint64 x)
{
	ASM_W("csrw mtvec, %0");
}

@ %def w_mtvec

@
Use riscv's sv39 page table scheme.
<<riscv: macros and inline functions>>=
#define SATP_SV39 (8L << 60)

#define MAKE_SATP(pagetable) (SATP_SV39 | (((uint64)pagetable) >> 12))

@ %def SATP_SV39 MAKE_SATP

@
Supervisor address translation and protection;
holds the address of the page table.
<<riscv: macros and inline functions>>=
static inline void w_satp(uint64 x)
{
	ASM_W("csrw satp, %0");
}

static inline uint64 r_satp()
{
	uint64 x;
	ASM_R("csrr %0, satp");
	return x;
}

@ %def w_satp r_satp

@
Supervisor Scratch register.
<<riscv: macros and inline functions>>=
static inline void w_sscratch(uint64 x)
{
	ASM_W("csrw sscratch, %0");
}

static inline void w_mscratch(uint64 x)
{
	ASM_W("csrw mscratch, %0");
}

@ %def w_sscratch w_msscratch

@
Supervisor Trap Cause.
<<riscv: macros and inline functions>>=
static inline uint64 r_scause()
{
	uint64 x;
	ASM_R("csrr %0, scause");
	return x;
}

@ %def r_scause

@
Supervisor Trap Value.
<<riscv: macros and inline functions>>=
static inline uint64 r_stval()
{
	uint64 x;
	ASM_R("csrr %0, stval");
	return x;
}

@ %def r_stval

@
Machine-mode Counter-Enable.
<<riscv: macros and inline functions>>=
static inline void w_mcounteren(uint64 x)
{
	ASM_W("csrw mcounteren, %0");
}

static inline uint64 r_mcounteren()
{
	uint64 x;
	ASM_R("csrr %0, mcounteren");
	return x;
}

@ %def w_mcounteren r_mcounteren

@
Machine-mode cycle counter.
<<riscv: macros and inline functions>>=
static inline uint64 r_time()
{
	uint64 x;
	ASM_R("csrr %0, time");
	return x;
}

@ %def r_time

@
Enable device interrupts.
<<riscv: macros and inline functions>>=
static inline void intr_on()
{
	w_sstatus(r_sstatus() | SSTATUS_SIE);
}

@ %def intr_on

@
Disable device interrupts.
<<riscv: macros and inline functions>>=
static inline void intr_off()
{
	w_sstatus(r_sstatus() & ~SSTATUS_SIE);
}

@ %def intr_off

@
Are device interrupts enabled?
<<riscv: macros and inline functions>>=
static inline int intr_get()
{
	uint64 x = r_sstatus();
	return (x & SSTATUS_SIE) != 0;
}

@ %def intr_get

@
Get stack pointer.
<<riscv: macros and inline functions>>=
static inline uint64 r_sp()
{
	uint64 x;
	ASM_R("mv %0, sp");
	return x;
}

@ %def r_sp

@
Read and write {\tt tp}, the thread pointer, which holds
this core's hartid (core number). 
<<riscv: macros and inline functions>>=
static inline uint64 r_tp()
{
	uint64 x;
	ASM_R("mv %0, tp");
	return x;
}

static inline void w_tp(uint64 x)
{
	ASM_W("mv tp, %0");
}

@ %def r_tp w_tp

@
Read {\tt ra}.
<<riscv: macros and inline functions>>=
static inline uint64 r_ra()
{
	uint64 x;
	ASM_R("mv %0, ra");
	return x;
}

@ %def r_ra

@
Flush the TLB.
<<riscv: macros and inline functions>>=
static inline void sfence_vma()
{
	ASM("sfence.vma zero, zero");
	/* the zero, zero means flush all TLB entries. */
}

@ %def sfence_vma

@
Pagetable.
<<riscv: macros and inline functions>>=
#define PGSIZE 4096		/* bytes per page */
#define PGSHIFT 12		/* bits of offset within a page */

#define PGROUNDUP(sz)  (((sz)+PGSIZE-1) & ~(PGSIZE-1))
#define PGROUNDDOWN(a) (((a)) & ~(PGSIZE-1))

#define PTE_V (1L << 0)		/* valid */
#define PTE_R (1L << 1)
#define PTE_W (1L << 2)
#define PTE_X (1L << 3)
#define PTE_U (1L << 4)		/* 1 -> user can access */

/* shift a physical address to the right place for a PTE. */
#define PA2PTE(pa) ((((uint64)pa) >> 12) << 10) 

#define PTE2PA(pte) (((pte) >> 10) << 12)

#define PTE_FLAGS(pte) ((pte) & 0x3FF)

/* extract the three 9-bit page table indices from a virtual address. */
#define PXMASK          0x1FF	/* 9 bits */
#define PXSHIFT(level)  (PGSHIFT+(9*(level)))
#define PX(level, va) ((((uint64) (va)) >> PXSHIFT(level)) & PXMASK)

/*
 * one beyond the highest possible virtual address.
 * MAXVA is actually one bit less than the max allowed by
 * Sv39, to avoid having to sign-extend virtual addresses
 * that have the high bit set.
*/
#define MAXVA (1L << (9 + 9 + 9 + 12 - 1))

<<riscv: types>>=
typedef uint64 pte_t;
typedef uint64 *pagetable_t;	/* 512 PTEs */
