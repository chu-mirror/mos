@
\subsubsection{Subsystem Layer}
Some advanced features can be introduced here

@
Define the data structure first, here used a fixed amount of {\it locks},
it's relatively reasonable design when compare the need for a new lock to
overhead produced by dynamic memory allocation.

<<lock's data>>=
struct spinlock {
	uint64 locked;
} locks[MAX_LOCK];

/* current number of locks in use, [[locks[0]]] is used by itself */
static int cur = 1; 

<<lock's macros>>=
#define MAX_LOCK 64

<<lock's interface>>=
typedef struct spinlock *spinlock;


@
Initialize this module, the array of locks should it self be locked.
<<lock's functions>>=
void
spinlock_init()
{
	init_lock(&locks[0]);
}

void
initlock(spinlock lk)
{
	lk->locked = 0;
}

@
Lock's allocation and release.
<<lock's functions>>=
spinlock
allo_lock()
{
	if (cur == MAX_LOCK) {
	}
}
@
\subsection{UART}

<<uart's repertoire>>=
<<repertoire of driver layer>>

<<repertoire of subsystem layer>>=
<<uart's port>>

@
The {\tt UART} control registers,
see {\tt http://byterunner.com/16550.html} for more information.
Register labeled by 0 and 2 has different meanings for write vs write.

<<uart's control register bit maps>>=

#define RHR	0	/* receive holding register */
#define THR	0	/* transmit holding register */
#define IER	1	/* interrupt enable register */
#define FCR	2	/* FIFO control register */
#define ISR	2	/* interrupt status register */
#define LCR	3	/* line control register */
#define LSR	5	/* line status register */
#define SPR	7	/* scratchpad register */

#define IER_R_ENABLE (1<<0) /* receive holding register interrupt */
#define IER_T_ENABLE (1<<1) /* transmit holding register interrupt */
#define IER_RLS_ENABLE (1<<2) /* receive line status interrupt */

#define FCR_FIFO_ENABLE (1<<0) /* FIFO enable */
#define FCR_FIFO_R_RESET (1<<1) /* receiver FIFO reset */
#define FCR_FIFO_T_RESET (1<<2) /* transmit FIFO reset */
#define FCR_FIFO_CLEAR (3<<1) /* reset both */

#define ISR_INT_STATUS (1<<0) /* interrupt status */
#define ISR_INT_PRIOR (7<<1) /* interrupt prior */

#define LCR_WORD_LENGTH (3<<0) /* word length */
#define LCR_BAUD_LATCH (1<<7) /* internal baud rate counter latch enable */

#define LSR_R_READY (1<<0) /* receive data ready */
#define LSR_T_EMPTY (1<<5) /* transmit holding empty */

<<uart's macros>>=
<<uart's control register bit maps>>

@
[[uartinit]] initialize uart controler,
disable all interrupts for now.
<<uart's functions>>=
void
uartinit()
{
	REG(IER) = 0x00; /* disable all interrupts */
}
@ %def uartinit

<<uart's port>>=
void uartinit();

@
Define a macro to help dealing with registers.
<<uart's macros>>=
#define REG(r) (*(volatile uint8 *)(UART0 + (r)))

@ %def REG

@
<<uart's functions>>=
void
uartputc(uint8 c)
{
	while((REG(LSR) & LSR_T_EMPTY) == 0) ;
	REG(THR) = c;
}

@ %def uartputc

<<uart's port>>=
void uartputc(uint8);

