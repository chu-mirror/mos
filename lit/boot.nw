@
\section{Boot}
This chapter defined boot process of \.{MOS}.

Booting consists of two parts,
according to at which CPU mode the hart is running.
Start from machine mode, then switch to supervisor mode.

Use three modules to handle this process, {\tt entry}, {\tt start}, {\tt main}.
{\tt entry} and {\tt start} run at machine mode,
from view of code's organization, they run in driver layer,
{\tt main} run at supervisor mode, in subsystem layer.

@
\subsection{entry}
Start with assembly code, turn to C~code after initialization of stacks.

<<entry's functions>>=
.global _entry
_entry:
	<<prepare per CPU stack>>
	<<continue with C code>>
spin:
	j spin

@
\subsection{start}
Now, turn to C~code.

<<start's repertoire>>=
<<repertoire of driver layer>>

@
[[stack0]] is defined here.
<<start's data>>=
__attribute__ ((aligned (16))) char stack0[4096 * NCPU];
@ %def stack0

@
[[start]] is the main routine of boot in machine mode.
<<start's functions>>=
void
start()
{
	<<set up initial status of CPU>>
	<<prepare for switching to supervisor mode>>
	ASM("mret");
}
@ %def start

@
\subsection{main}

<<main's repertoire>>=
<<repertoire of subsystem layer>>
<<log's interface>>

<<main's functions>>=
void
main()
{
	uartinit();
	printf("Hello World!\nFrom CPU %d\nThe pointer %p\n%s\n", -10, 16*15, "I lo\n");

	while(1);
}

@ %def main
